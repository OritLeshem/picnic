const userService = require('./user.service')
const socketService = require('../../services/socket.service')
const logger = require('../../services/logger.service')

async function getUser(req, res) {
    try {
        const user = await userService.getById(req.params.id)
        res.send(user)
    } catch (err) {
        logger.error('Failed to get user', err)
        res.status(500).send({ err: 'Failed to get user' })
    }
}

async function getUsers(req, res) {
    console.log('get user controller')

    try {
        const filterBy = {
            fullname: req.query?.params.filterBy.fullname || '',
        }
        console.log('filterBy', req.query?.params.filterBy.fullname)
        const users = await userService.query(filterBy)
        res.send(users)
    } catch (err) {
        logger.error('Failed to get users', err)
        res.status(500).send({ err: 'Failed to get users' })
    }
}

async function deleteUser(req, res) {
    try {
        await userService.remove(req.params.id)
        res.send({ msg: 'Deleted successfully' })
    } catch (err) {
        logger.error('Failed to delete user', err)
        res.status(500).send({ err: 'Failed to delete user' })
    }
}

async function updateUser(req, res) {
    try {
        const user = req.body
        const savedUser = await userService.update(user)
        res.send(savedUser)
    } catch (err) {
        logger.error('Failed to update user', err)
        res.status(500).send({ err: 'Failed to update user' })
    }
}

module.exports = {
    getUser,
    getUsers,
    deleteUser,
    updateUser
}

// filterBy <ref *2> IncomingMessage {
//     _readableState: ReadableState {
//       objectMode: false,
//       highWaterMark: 16384,
//       buffer: BufferList { head: null, tail: null, length: 0 },
//       length: 0,
//       pipes: [],
//       flowing: null,
//       ended: false,
//       endEmitted: false,
//       reading: false,
//       constructed: true,
//       sync: true,
//       needReadable: false,
//       emittedReadable: false,
//       readableListening: false,
//       resumeScheduled: false,
//       errorEmitted: false,
//       emitClose: true,
//       autoDestroy: true,
//       destroyed: false,
//       errored: null,
//       closed: false,
//       closeEmitted: false,
//       defaultEncoding: 'utf8',
//       awaitDrainWriters: null,
//       multiAwaitDrain: false,
//       readingMore: true,
//       dataEmitted: false,
//       decoder: null,
//       encoding: null,
//       [Symbol(kPaused)]: null
//     },
//     _events: [Object: null prototype] {},
//     _eventsCount: 0,
//     _maxListeners: undefined,
//     socket: <ref *1> Socket {
//       connecting: false,
//       _hadError: false,
//       _parent: null,
//       _host: null,
//       _closeAfterHandlingError: false,
//       _readableState: ReadableState {
//         objectMode: false,
//         highWaterMark: 16384,
//         buffer: BufferList { head: null, tail: null, length: 0 },
//         length: 0,
//         pipes: [],
//         flowing: true,
//         ended: false,
//         endEmitted: false,
//         reading: true,
//         constructed: true,
//         sync: false,
//         needReadable: true,
//         emittedReadable: false,
//         readableListening: false,
//         resumeScheduled: false,
//         errorEmitted: false,
//         emitClose: false,
//         autoDestroy: true,
//         destroyed: false,
//         errored: null,
//         closed: false,
//         closeEmitted: false,
//         defaultEncoding: 'utf8',
//         awaitDrainWriters: null,
//         multiAwaitDrain: false,
//         readingMore: false,
//         dataEmitted: false,
//         decoder: null,
//         encoding: null,
//         [Symbol(kPaused)]: false
//       },
//       _events: [Object: null prototype] {
//         end: [Array],
//         timeout: [Function: socketOnTimeout],
//         data: [Function: bound socketOnData],
//         error: [Function: socketOnError],
//         close: [Array],
//         drain: [Function: bound socketOnDrain],
//         resume: [Function: onSocketResume],
//         pause: [Function: onSocketPause]
//       },
//       _eventsCount: 8,
//       _maxListeners: undefined,
//       _writableState: WritableState {
//         objectMode: false,
//         highWaterMark: 16384,
//         finalCalled: false,
//         needDrain: false,
//         ending: false,
//         ended: false,
//         finished: false,
//         destroyed: false,
//         decodeStrings: false,
//         defaultEncoding: 'utf8',
//         length: 0,
//         writing: false,
//         corked: 0,
//         sync: false,
//         bufferProcessing: false,
//         onwrite: [Function: bound onwrite],
//         writecb: null,
//         writelen: 0,
//         afterWriteTickInfo: null,
//         buffered: [],
//         bufferedIndex: 0,
//         allBuffers: true,
//         allNoop: true,
//         pendingcb: 0,
//         constructed: true,
//         prefinished: false,
//         errorEmitted: false,
//         emitClose: false,
//         autoDestroy: true,
//         errored: null,
//         closed: false,
//         closeEmitted: false,
//         [Symbol(kOnFinished)]: []
//       },
//       allowHalfOpen: true,
//       _sockname: null,
//       _pendingData: null,
//       _pendingEncoding: '',
//       server: Server {
//         maxHeaderSize: undefined,
//         insecureHTTPParser: undefined,
//         requestTimeout: 300000,
//         headersTimeout: 60000,
//         keepAliveTimeout: 5000,
//         connectionsCheckingInterval: 30000,
//         _events: [Object: null prototype],
//         _eventsCount: 5,
//         _maxListeners: undefined,
//         _connections: 3,
//         _handle: [TCP],
//         _usingWorkers: false,
//         _workers: [],
//         _unref: false,
//         allowHalfOpen: true,
//         pauseOnConnect: false,
//         noDelay: true,
//         keepAlive: false,
//         keepAliveInitialDelay: 0,
//         httpAllowHalfOpen: false,
//         timeout: 0,
//         maxHeadersCount: null,
//         maxRequestsPerSocket: 0,
//         _connectionKey: '6::::3030',
//         [Symbol(IncomingMessage)]: [Function: IncomingMessage],
//         [Symbol(ServerResponse)]: [Function: ServerResponse],
//         [Symbol(kCapture)]: false,
//         [Symbol(async_id_symbol)]: 12,
//         [Symbol(http.server.connections)]: ConnectionsList {},
//         [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
//           _idleTimeout: 30000,
//           _idlePrev: [TimersList],
//           _idleNext: [TimersList],
//           _idleStart: 30099,
//           _onTimeout: [Function: bound checkConnections],
//           _timerArgs: undefined,
//           _repeat: 30000,
//           _destroyed: false,
//           [Symbol(refed)]: false,
//           [Symbol(kHasPrimitive)]: false,
//           [Symbol(asyncId)]: 8,
//           [Symbol(triggerId)]: 1
//         },
//         [Symbol(kUniqueHeaders)]: null
//       },
//       _server: Server {
//         maxHeaderSize: undefined,
//         insecureHTTPParser: undefined,
//         requestTimeout: 300000,
//         headersTimeout: 60000,
//         keepAliveTimeout: 5000,
//         connectionsCheckingInterval: 30000,
//         _events: [Object: null prototype],
//         _eventsCount: 5,
//         _maxListeners: undefined,
//         _connections: 3,
//         _handle: [TCP],
//         _usingWorkers: false,
//         _workers: [],
//         _unref: false,
//         allowHalfOpen: true,
//         pauseOnConnect: false,
//         noDelay: true,
//         keepAlive: false,
//         keepAliveInitialDelay: 0,
//         httpAllowHalfOpen: false,
//         timeout: 0,
//         maxHeadersCount: null,
//         maxRequestsPerSocket: 0,
//         _connectionKey: '6::::3030',
//         [Symbol(IncomingMessage)]: [Function: IncomingMessage],
//         [Symbol(ServerResponse)]: [Function: ServerResponse],
//         [Symbol(kCapture)]: false,
//         [Symbol(async_id_symbol)]: 12,
//         [Symbol(http.server.connections)]: ConnectionsList {},
//         [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
//           _idleTimeout: 30000,
//           _idlePrev: [TimersList],
//           _idleNext: [TimersList],
//           _idleStart: 30099,
//           _onTimeout: [Function: bound checkConnections],
//           _timerArgs: undefined,
//           _repeat: 30000,
//           _destroyed: false,
//           [Symbol(refed)]: false,
//           [Symbol(kHasPrimitive)]: false,
//           [Symbol(asyncId)]: 8,
//           [Symbol(triggerId)]: 1
//         },
//         [Symbol(kUniqueHeaders)]: null
//       },
//       parser: HTTPParser {
//         '0': null,
//         '1': [Function: parserOnHeaders],
//         '2': [Function: parserOnHeadersComplete],
//         '3': [Function: parserOnBody],
//         '4': [Function: parserOnMessageComplete],
//         '5': [Function: bound onParserExecute],
//         '6': [Function: bound onParserTimeout],
//         _headers: [],
//         _url: '',
//         socket: [Circular *1],
//         incoming: [Circular *2],
//         outgoing: null,
//         maxHeaderPairs: 2000,
//         _consumed: true,
//         onIncoming: [Function: bound parserOnIncoming],
//         [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
//       },
//       on: [Function: socketListenerWrap],
//       addListener: [Function: socketListenerWrap],
//       prependListener: [Function: socketListenerWrap],
//       setEncoding: [Function: socketSetEncoding],
//       _paused: false,
//       _httpMessage: ServerResponse {
//         _events: [Object: null prototype],
//         _eventsCount: 1,
//         _maxListeners: undefined,
//         outputData: [],
//         outputSize: 0,
//         writable: true,
//         destroyed: false,
//         _last: false,
//         chunkedEncoding: false,
//         shouldKeepAlive: true,
//         maxRequestsOnConnectionReached: false,
//         _defaultKeepAlive: true,
//         useChunkedEncodingByDefault: true,
//         sendDate: true,
//         _removedConnection: false,
//         _removedContLen: false,
//         _removedTE: false,
//         strictContentLength: false,
//         _contentLength: null,
//         _hasBody: true,
//         _trailer: '',
//         finished: false,
//         _headerSent: false,
//         _closed: false,
//         socket: [Circular *1],
//         _header: null,
//         _keepAliveTimeout: 5000,
//         _onPendingData: [Function: bound updateOutgoingData],
//         req: [Circular *2],
//         _sent100: false,
//         _expect_continue: false,
//         _maxRequestsPerSocket: 0,
//         locals: [Object: null prototype] {},
//         [Symbol(kCapture)]: false,
//         [Symbol(kBytesWritten)]: 0,
//         [Symbol(kEndCalled)]: false,
//         [Symbol(kNeedDrain)]: false,
//         [Symbol(corked)]: 0,
//         [Symbol(kOutHeaders)]: [Object: null prototype],
//         [Symbol(kUniqueHeaders)]: null
//       },
//       timeout: 0,
//       [Symbol(async_id_symbol)]: 175,
//       [Symbol(kHandle)]: TCP {
//         reading: true,
//         onconnection: null,
//         _consumed: true,
//         [Symbol(owner_symbol)]: [Circular *1]
//       },
//       [Symbol(lastWriteQueueSize)]: 0,
//       [Symbol(timeout)]: Timeout {
//         _idleTimeout: -1,
//         _idlePrev: null,
//         _idleNext: null,
//         _idleStart: 30378,
//         _onTimeout: null,
//         _timerArgs: undefined,
//         _repeat: null,
//         _destroyed: true,
//         [Symbol(refed)]: false,
//         [Symbol(kHasPrimitive)]: false,
//         [Symbol(asyncId)]: 361,
//         [Symbol(triggerId)]: 358,
//         [Symbol(kResourceStore)]: [Object]
//       },
//       [Symbol(kBuffer)]: null,
//       [Symbol(kBufferCb)]: null,
//       [Symbol(kBufferGen)]: null,
//       [Symbol(kCapture)]: false,
//       [Symbol(kSetNoDelay)]: true,
//       [Symbol(kSetKeepAlive)]: false,
//       [Symbol(kSetKeepAliveInitialDelay)]: 0,
//       [Symbol(kBytesRead)]: 0,
//       [Symbol(kBytesWritten)]: 0
//     },
//     httpVersionMajor: 1,
//     httpVersionMinor: 1,
//     httpVersion: '1.1',
//     complete: false,
//     rawHeaders: [
//       'Host',
//       'localhost:3030',
//       'Connection',
//       'keep-alive',
//       'sec-ch-ua',
//       '"Google Chrome";v="113", "Chromium";v="113", "Not-A.Brand";v="24"',
//       'Accept',
//       'application/json, text/plain, */*',
//       'Content-Type',
//       'application/json',
//       'DNT',
//       '1',
//       'sec-ch-ua-mobile',
//       '?0',
//       'User-Agent',
//       'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36',
//       'sec-ch-ua-platform',
//       '"macOS"',
//       'Origin',
//       'http://localhost:3000',
//       'Sec-Fetch-Site',
//       'same-site',
//       'Sec-Fetch-Mode',
//       'cors',
//       'Sec-Fetch-Dest',
//       'empty',
//       'Referer',
//       'http://localhost:3000/',
//       'Accept-Encoding',
//       'gzip, deflate, br',
//       'Accept-Language',
//       'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
//       'Cookie',
//       'loginToken=aa44718113ebba8e91acecf904bb06fae8ed343266f9c83fe6bf2bf11b66b6ba659170721e34e17ef79660bf5498225265109cc452c6345747b202f53f171484722fa0a3300c32ccd482d64c1a0f533100d5b9f3005e823593db18c5593461b079bcdb9dda2adee9934d3c57a127c503f98620c430a5382d74b14ed3c87cc2cab1205721c54cf71b8ab33be87cd4a482f2'
//     ],
//     rawTrailers: [],
//     aborted: false,
//     upgrade: false,
//     url: '/?params[filterBy][fullname]=d',
//     method: 'GET',
//     statusCode: null,
//     statusMessage: null,
//     client: <ref *1> Socket {
//       connecting: false,
//       _hadError: false,
//       _parent: null,
//       _host: null,
//       _closeAfterHandlingError: false,
//       _readableState: ReadableState {
//         objectMode: false,
//         highWaterMark: 16384,
//         buffer: BufferList { head: null, tail: null, length: 0 },
//         length: 0,
//         pipes: [],
//         flowing: true,
//         ended: false,
//         endEmitted: false,
//         reading: true,
//         constructed: true,
//         sync: false,
//         needReadable: true,
//         emittedReadable: false,
//         readableListening: false,
//         resumeScheduled: false,
//         errorEmitted: false,
//         emitClose: false,
//         autoDestroy: true,
//         destroyed: false,
//         errored: null,
//         closed: false,
//         closeEmitted: false,
//         defaultEncoding: 'utf8',
//         awaitDrainWriters: null,
//         multiAwaitDrain: false,
//         readingMore: false,
//         dataEmitted: false,
//         decoder: null,
//         encoding: null,
//         [Symbol(kPaused)]: false
//       },
//       _events: [Object: null prototype] {
//         end: [Array],
//         timeout: [Function: socketOnTimeout],
//         data: [Function: bound socketOnData],
//         error: [Function: socketOnError],
//         close: [Array],
//         drain: [Function: bound socketOnDrain],
//         resume: [Function: onSocketResume],
//         pause: [Function: onSocketPause]
//       },
//       _eventsCount: 8,
//       _maxListeners: undefined,
//       _writableState: WritableState {
//         objectMode: false,
//         highWaterMark: 16384,
//         finalCalled: false,
//         needDrain: false,
//         ending: false,
//         ended: false,
//         finished: false,
//         destroyed: false,
//         decodeStrings: false,
//         defaultEncoding: 'utf8',
//         length: 0,
//         writing: false,
//         corked: 0,
//         sync: false,
//         bufferProcessing: false,
//         onwrite: [Function: bound onwrite],
//         writecb: null,
//         writelen: 0,
//         afterWriteTickInfo: null,
//         buffered: [],
//         bufferedIndex: 0,
//         allBuffers: true,
//         allNoop: true,
//         pendingcb: 0,
//         constructed: true,
//         prefinished: false,
//         errorEmitted: false,
//         emitClose: false,
//         autoDestroy: true,
//         errored: null,
//         closed: false,
//         closeEmitted: false,
//         [Symbol(kOnFinished)]: []
//       },
//       allowHalfOpen: true,
//       _sockname: null,
//       _pendingData: null,
//       _pendingEncoding: '',
//       server: Server {
//         maxHeaderSize: undefined,
//         insecureHTTPParser: undefined,
//         requestTimeout: 300000,
//         headersTimeout: 60000,
//         keepAliveTimeout: 5000,
//         connectionsCheckingInterval: 30000,
//         _events: [Object: null prototype],
//         _eventsCount: 5,
//         _maxListeners: undefined,
//         _connections: 3,
//         _handle: [TCP],
//         _usingWorkers: false,
//         _workers: [],
//         _unref: false,
//         allowHalfOpen: true,
//         pauseOnConnect: false,
//         noDelay: true,
//         keepAlive: false,
//         keepAliveInitialDelay: 0,
//         httpAllowHalfOpen: false,
//         timeout: 0,
//         maxHeadersCount: null,
//         maxRequestsPerSocket: 0,
//         _connectionKey: '6::::3030',
//         [Symbol(IncomingMessage)]: [Function: IncomingMessage],
//         [Symbol(ServerResponse)]: [Function: ServerResponse],
//         [Symbol(kCapture)]: false,
//         [Symbol(async_id_symbol)]: 12,
//         [Symbol(http.server.connections)]: ConnectionsList {},
//         [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
//           _idleTimeout: 30000,
//           _idlePrev: [TimersList],
//           _idleNext: [TimersList],
//           _idleStart: 30099,
//           _onTimeout: [Function: bound checkConnections],
//           _timerArgs: undefined,
//           _repeat: 30000,
//           _destroyed: false,
//           [Symbol(refed)]: false,
//           [Symbol(kHasPrimitive)]: false,
//           [Symbol(asyncId)]: 8,
//           [Symbol(triggerId)]: 1
//         },
//         [Symbol(kUniqueHeaders)]: null
//       },
//       _server: Server {
//         maxHeaderSize: undefined,
//         insecureHTTPParser: undefined,
//         requestTimeout: 300000,
//         headersTimeout: 60000,
//         keepAliveTimeout: 5000,
//         connectionsCheckingInterval: 30000,
//         _events: [Object: null prototype],
//         _eventsCount: 5,
//         _maxListeners: undefined,
//         _connections: 3,
//         _handle: [TCP],
//         _usingWorkers: false,
//         _workers: [],
//         _unref: false,
//         allowHalfOpen: true,
//         pauseOnConnect: false,
//         noDelay: true,
//         keepAlive: false,
//         keepAliveInitialDelay: 0,
//         httpAllowHalfOpen: false,
//         timeout: 0,
//         maxHeadersCount: null,
//         maxRequestsPerSocket: 0,
//         _connectionKey: '6::::3030',
//         [Symbol(IncomingMessage)]: [Function: IncomingMessage],
//         [Symbol(ServerResponse)]: [Function: ServerResponse],
//         [Symbol(kCapture)]: false,
//         [Symbol(async_id_symbol)]: 12,
//         [Symbol(http.server.connections)]: ConnectionsList {},
//         [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
//           _idleTimeout: 30000,
//           _idlePrev: [TimersList],
//           _idleNext: [TimersList],
//           _idleStart: 30099,
//           _onTimeout: [Function: bound checkConnections],
//           _timerArgs: undefined,
//           _repeat: 30000,
//           _destroyed: false,
//           [Symbol(refed)]: false,
//           [Symbol(kHasPrimitive)]: false,
//           [Symbol(asyncId)]: 8,
//           [Symbol(triggerId)]: 1
//         },
//         [Symbol(kUniqueHeaders)]: null
//       },
//       parser: HTTPParser {
//         '0': null,
//         '1': [Function: parserOnHeaders],
//         '2': [Function: parserOnHeadersComplete],
//         '3': [Function: parserOnBody],
//         '4': [Function: parserOnMessageComplete],
//         '5': [Function: bound onParserExecute],
//         '6': [Function: bound onParserTimeout],
//         _headers: [],
//         _url: '',
//         socket: [Circular *1],
//         incoming: [Circular *2],
//         outgoing: null,
//         maxHeaderPairs: 2000,
//         _consumed: true,
//         onIncoming: [Function: bound parserOnIncoming],
//         [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
//       },
//       on: [Function: socketListenerWrap],
//       addListener: [Function: socketListenerWrap],
//       prependListener: [Function: socketListenerWrap],
//       setEncoding: [Function: socketSetEncoding],
//       _paused: false,
//       _httpMessage: ServerResponse {
//         _events: [Object: null prototype],
//         _eventsCount: 1,
//         _maxListeners: undefined,
//         outputData: [],
//         outputSize: 0,
//         writable: true,
//         destroyed: false,
//         _last: false,
//         chunkedEncoding: false,
//         shouldKeepAlive: true,
//         maxRequestsOnConnectionReached: false,
//         _defaultKeepAlive: true,
//         useChunkedEncodingByDefault: true,
//         sendDate: true,
//         _removedConnection: false,
//         _removedContLen: false,
//         _removedTE: false,
//         strictContentLength: false,
//         _contentLength: null,
//         _hasBody: true,
//         _trailer: '',
//         finished: false,
//         _headerSent: false,
//         _closed: false,
//         socket: [Circular *1],
//         _header: null,
//         _keepAliveTimeout: 5000,
//         _onPendingData: [Function: bound updateOutgoingData],
//         req: [Circular *2],
//         _sent100: false,
//         _expect_continue: false,
//         _maxRequestsPerSocket: 0,
//         locals: [Object: null prototype] {},
//         [Symbol(kCapture)]: false,
//         [Symbol(kBytesWritten)]: 0,
//         [Symbol(kEndCalled)]: false,
//         [Symbol(kNeedDrain)]: false,
//         [Symbol(corked)]: 0,
//         [Symbol(kOutHeaders)]: [Object: null prototype],
//         [Symbol(kUniqueHeaders)]: null
//       },
//       timeout: 0,
//       [Symbol(async_id_symbol)]: 175,
//       [Symbol(kHandle)]: TCP {
//         reading: true,
//         onconnection: null,
//         _consumed: true,
//         [Symbol(owner_symbol)]: [Circular *1]
//       },
//       [Symbol(lastWriteQueueSize)]: 0,
//       [Symbol(timeout)]: Timeout {
//         _idleTimeout: -1,
//         _idlePrev: null,
//         _idleNext: null,
//         _idleStart: 30378,
//         _onTimeout: null,
//         _timerArgs: undefined,
//         _repeat: null,
//         _destroyed: true,
//         [Symbol(refed)]: false,
//         [Symbol(kHasPrimitive)]: false,
//         [Symbol(asyncId)]: 361,
//         [Symbol(triggerId)]: 358,
//         [Symbol(kResourceStore)]: [Object]
//       },
//       [Symbol(kBuffer)]: null,
//       [Symbol(kBufferCb)]: null,
//       [Symbol(kBufferGen)]: null,
//       [Symbol(kCapture)]: false,
//       [Symbol(kSetNoDelay)]: true,
//       [Symbol(kSetKeepAlive)]: false,
//       [Symbol(kSetKeepAliveInitialDelay)]: 0,
//       [Symbol(kBytesRead)]: 0,
//       [Symbol(kBytesWritten)]: 0
//     },
//     _consuming: false,
//     _dumped: false,
//     next: [Function: next],
//     baseUrl: '/api/user',
//     originalUrl: '/api/user?params[filterBy][fullname]=d',
//     _parsedUrl: Url {
//       protocol: null,
//       slashes: null,
//       auth: null,
//       host: null,
//       port: null,
//       hostname: null,
//       hash: null,
//       search: '?params[filterBy][fullname]=d',
//       query: 'params[filterBy][fullname]=d',
//       pathname: '/',
//       path: '/?params[filterBy][fullname]=d',
//       href: '/?params[filterBy][fullname]=d',
//       _raw: '/?params[filterBy][fullname]=d'
//     },
//     params: {},
//     query: { params: { filterBy: [Object] } },
//     res: <ref *3> ServerResponse {
//       _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
//       _eventsCount: 1,
//       _maxListeners: undefined,
//       outputData: [],
//       outputSize: 0,
//       writable: true,
//       destroyed: false,
//       _last: false,
//       chunkedEncoding: false,
//       shouldKeepAlive: true,
//       maxRequestsOnConnectionReached: false,
//       _defaultKeepAlive: true,
//       useChunkedEncodingByDefault: true,
//       sendDate: true,
//       _removedConnection: false,
//       _removedContLen: false,
//       _removedTE: false,
//       strictContentLength: false,
//       _contentLength: null,
//       _hasBody: true,
//       _trailer: '',
//       finished: false,
//       _headerSent: false,
//       _closed: false,
//       socket: <ref *1> Socket {
//         connecting: false,
//         _hadError: false,
//         _parent: null,
//         _host: null,
//         _closeAfterHandlingError: false,
//         _readableState: [ReadableState],
//         _events: [Object: null prototype],
//         _eventsCount: 8,
//         _maxListeners: undefined,
//         _writableState: [WritableState],
//         allowHalfOpen: true,
//         _sockname: null,
//         _pendingData: null,
//         _pendingEncoding: '',
//         server: [Server],
//         _server: [Server],
//         parser: [HTTPParser],
//         on: [Function: socketListenerWrap],
//         addListener: [Function: socketListenerWrap],
//         prependListener: [Function: socketListenerWrap],
//         setEncoding: [Function: socketSetEncoding],
//         _paused: false,
//         _httpMessage: [Circular *3],
//         timeout: 0,
//         [Symbol(async_id_symbol)]: 175,
//         [Symbol(kHandle)]: [TCP],
//         [Symbol(lastWriteQueueSize)]: 0,
//         [Symbol(timeout)]: Timeout {
//           _idleTimeout: -1,
//           _idlePrev: null,
//           _idleNext: null,
//           _idleStart: 30378,
//           _onTimeout: null,
//           _timerArgs: undefined,
//           _repeat: null,
//           _destroyed: true,
//           [Symbol(refed)]: false,
//           [Symbol(kHasPrimitive)]: false,
//           [Symbol(asyncId)]: 361,
//           [Symbol(triggerId)]: 358,
//           [Symbol(kResourceStore)]: [Object]
//         },
//         [Symbol(kBuffer)]: null,
//         [Symbol(kBufferCb)]: null,
//         [Symbol(kBufferGen)]: null,
//         [Symbol(kCapture)]: false,
//         [Symbol(kSetNoDelay)]: true,
//         [Symbol(kSetKeepAlive)]: false,
//         [Symbol(kSetKeepAliveInitialDelay)]: 0,
//         [Symbol(kBytesRead)]: 0,
//         [Symbol(kBytesWritten)]: 0
//       },
//       _header: null,
//       _keepAliveTimeout: 5000,
//       _onPendingData: [Function: bound updateOutgoingData],
//       req: [Circular *2],
//       _sent100: false,
//       _expect_continue: false,
//       _maxRequestsPerSocket: 0,
//       locals: [Object: null prototype] {},
//       [Symbol(kCapture)]: false,
//       [Symbol(kBytesWritten)]: 0,
//       [Symbol(kEndCalled)]: false,
//       [Symbol(kNeedDrain)]: false,
//       [Symbol(corked)]: 0,
//       [Symbol(kOutHeaders)]: [Object: null prototype] {
//         'x-powered-by': [Array],
//         'access-control-allow-origin': [Array],
//         vary: [Array],
//         'access-control-allow-credentials': [Array]
//       },
//       [Symbol(kUniqueHeaders)]: null
//     },
//     secret: undefined,
//     cookies: {
//       loginToken: 'aa44718113ebba8e91acecf904bb06fae8ed343266f9c83fe6bf2bf11b66b6ba659170721e34e17ef79660bf5498225265109cc452c6345747b202f53f171484722fa0a3300c32ccd482d64c1a0f533100d5b9f3005e823593db18c5593461b079bcdb9dda2adee9934d3c57a127c503f98620c430a5382d74b14ed3c87cc2cab1205721c54cf71b8ab33be87cd4a482f2'
//     },
//     signedCookies: [Object: null prototype] {},
//     body: {},
//     route: Route { path: '/', stack: [ [Layer] ], methods: { get: true } },
//     [Symbol(kCapture)]: false,
//     [Symbol(kHeaders)]: {
//       host: 'localhost:3030',
//       connection: 'keep-alive',
//       'sec-ch-ua': '"Google Chrome";v="113", "Chromium";v="113", "Not-A.Brand";v="24"',
//       accept: 'application/json, text/plain, */*',
//       'content-type': 'application/json',
//       dnt: '1',
//       'sec-ch-ua-mobile': '?0',
//       'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36',
//       'sec-ch-ua-platform': '"macOS"',
//       origin: 'http://localhost:3000',
//       'sec-fetch-site': 'same-site',
//       'sec-fetch-mode': 'cors',
//       'sec-fetch-dest': 'empty',
//       referer: 'http://localhost:3000/',
//       'accept-encoding': 'gzip, deflate, br',
//       'accept-language': 'he-IL,he;q=0.9,en-US;q=0.8,en;q=0.7',
//       cookie: 'loginToken=aa44718113ebba8e91acecf904bb06fae8ed343266f9c83fe6bf2bf11b66b6ba659170721e34e17ef79660bf5498225265109cc452c6345747b202f53f171484722fa0a3300c32ccd482d64c1a0f533100d5b9f3005e823593db18c5593461b079bcdb9dda2adee9934d3c57a127c503f98620c430a5382d74b14ed3c87cc2cab1205721c54cf71b8ab33be87cd4a482f2'
//     },
//     [Symbol(kHeadersCount)]: 34,
//     [Symbol(kTrailers)]: null,
//     [Symbol(kTrailersCount)]: 0
//   }